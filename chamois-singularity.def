BootStrap: docker
From: centos:8
%setup
    # THESE ARE DIRECTORIES REQUIRED FOR COMMON HPC BINDS
    mkdir $SINGULARITY_ROOTFS/scratch
    mkdir $SINGULARITY_ROOTFS/data

    # THIS IS THE DIRECTORY FOR ALL MOOSE RELATED BINARIES
    mkdir $SINGULARITY_ROOTFS/projects

    # COPY MOOSE
    cp -r ${MOOSE_DIR} ${SINGULARITY_ROOTFS}/projects/moose/
    # COPY CHAMOIS APP
    cp -r ${CHAMOIS_DIR} ${SINGULARITY_ROOTFS}/projects/chamois/
    # COPY MARMOT FOR CONSTITUTIVE MODELS
    cp -r ${MARMOT_DIR} ${SINGULARITY_ROOTFS}/projects/marmot/
%post
    #################################################################################
    #                                                                               #
    #                               BASIC SOFTWARE                                  #
    #                                                                               #
    #################################################################################
    dnf install -y gvim vim wget make git bison flex unzip libtirpc libtirpc-devel \
        openssl-devel infiniband-diags rdma-core-devel

    #################################################################################
    #                                                                               #
    #                               GCC 9                                           #
    #                                                                               #
    #################################################################################
    dnf -y install gcc-toolset-9-gcc gcc-toolset-9-gcc-c++ gcc-toolset-9-gcc-gfortran 
    source /opt/rh/gcc-toolset-9/enable

    #################################################################################
    #                                                                               #
    #                               CMAKE 3.18                                      #
    #                                                                               #
    #################################################################################
    cd $SINGULARITY_TMPDIR
    wget https://github.com/Kitware/CMake/releases/download/v3.18.4/cmake-3.18.4.tar.gz
    tar xzf cmake-3.18.4.tar.gz
    cd cmake-3.18.4
    ./configure
    make 
    make install

    #################################################################################
    #                                                                               #
    #                               EIGEN LATEST                                    #
    #                                                                               #
    #################################################################################
    git clone https://gitlab.com/libeigen/eigen.git
    cd eigen
    mkdir build
    cd build
    cmake ../
    make install

    #################################################################################
    #                                                                               #
    #                               PYTHON 3.8                                      #
    #                                                                               #
    #################################################################################
    dnf install -y python38 python38-devel.x86_64

    #################################################################################
    #                                                                               #
    #                               OPENMPI 4.0.2                                   #
    #                                                                               #
    #################################################################################
    dnf install -y openmpi openmpi-devel

    #################################################################################
    #                                                                               #
    #                               CLEANUP                                         #
    #                                                                               #
    #################################################################################
    dnf clean all && rm -rf /var/cache/dnf

    #################################################################################
    #                                                                               #
    #                               ENV. VARS                                       #
    #                                                                               #
    #################################################################################
    export PATH=$PATH:/usr/lib64/openmpi/bin/
    export CC=mpicc
    export CXX=mpicxx
    export F90=mpif90
    export F77=mpif77
    export FC=mpif90

    #################################################################################
    #                               BUILD PETSC                                     #
    #           (1)                 BUILD LIBMESH                                   #
    #                               (LIBMESH OPT ONLY)                              #
    #################################################################################
    cd /projects/moose
                ./scripts/update_and_rebuild_petsc.sh
    METHODS=opt ./scripts/update_and_rebuild_libmesh.sh

    #################################################################################
    #                                                                               #
    #           (2)                 BUILD MARMOT                                    #
    #                                                                               #
    #################################################################################
    cd /projects/marmot
    git clean -x -f
    mkdir build_centos8_gcc9
    cd build_centos8_gcc9
    cmake \
        -DCORE_MODULES='MarmotMechanicsCore' \
        -DMATERIAL_MODULES='all' \
        -DELEMENT_MODULES='none' \
        ../
    make -j8 install

    #################################################################################
    #                                                                               #
    #           (3)                 BUILD CHAMOIS                                   #
    #                                                                               #
    #################################################################################
    cd /projects/chamois
    git clean -x -f
    make -j8

%environment
    # LOCALE
    export LC_ALL=C

    # MAKE OPENMPI AVAILABLE
    export PATH=$PATH:/usr/lib64/openmpi/bin/

    # MAKE GCC 9 AVAILABLE
    source /opt/rh/gcc-toolset-9/enable

    # SET COMPILERS FOR MOOSE
    export CC=mpicc
    export CXX=mpicxx
    export F90=mpif90
    export F77=mpif77
    export FC=mpif90

    # ENSURE THAT NO OPENMP PARALLELIZATION IS USED
    # THIS USUALLY A GOOD IDEA FOR MPI PARALLELIZATION
    export OMP_NUM_THREADS=1

%labels
    Maintainer matthiasneuner
